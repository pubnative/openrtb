// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb(in *jlexer.Lexer, out *Video) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.Mimes = nil
			} else {
				in.Delim('[')
				if out.Mimes == nil {
					if !in.IsDelim(']') {
						out.Mimes = make([]string, 0, 4)
					} else {
						out.Mimes = []string{}
					}
				} else {
					out.Mimes = (out.Mimes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Mimes = append(out.Mimes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "minduration":
			out.Minduration = int(in.Int())
		case "maxduration":
			out.Maxduration = int(in.Int())
		case "protocol":
			out.Protocol = int(in.Int())
		case "protocols":
			if in.IsNull() {
				in.Skip()
				out.Protocols = nil
			} else {
				in.Delim('[')
				if out.Protocols == nil {
					if !in.IsDelim(']') {
						out.Protocols = make([]int, 0, 8)
					} else {
						out.Protocols = []int{}
					}
				} else {
					out.Protocols = (out.Protocols)[:0]
				}
				for !in.IsDelim(']') {
					var v2 int
					v2 = int(in.Int())
					out.Protocols = append(out.Protocols, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "w":
			out.W = int(in.Int())
		case "h":
			out.H = int(in.Int())
		case "startdelay":
			out.Startdelay = int(in.Int())
		case "linearity":
			out.Linearity = int(in.Int())
		case "sequence":
			out.Sequence = int(in.Int())
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.Battr = nil
			} else {
				in.Delim('[')
				if out.Battr == nil {
					if !in.IsDelim(']') {
						out.Battr = make([]int, 0, 8)
					} else {
						out.Battr = []int{}
					}
				} else {
					out.Battr = (out.Battr)[:0]
				}
				for !in.IsDelim(']') {
					var v3 int
					v3 = int(in.Int())
					out.Battr = append(out.Battr, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maxextended":
			out.Maxextended = int(in.Int())
		case "minbitrate":
			out.Minbitrate = int(in.Int())
		case "maxbitrate":
			out.Maxbitrate = int(in.Int())
		case "boxingallowed":
			out.Boxingallowed = int(in.Int())
		case "playbackmethod":
			if in.IsNull() {
				in.Skip()
				out.Playbackmethod = nil
			} else {
				in.Delim('[')
				if out.Playbackmethod == nil {
					if !in.IsDelim(']') {
						out.Playbackmethod = make([]int, 0, 8)
					} else {
						out.Playbackmethod = []int{}
					}
				} else {
					out.Playbackmethod = (out.Playbackmethod)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int
					v4 = int(in.Int())
					out.Playbackmethod = append(out.Playbackmethod, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "delivery":
			if in.IsNull() {
				in.Skip()
				out.Delivery = nil
			} else {
				in.Delim('[')
				if out.Delivery == nil {
					if !in.IsDelim(']') {
						out.Delivery = make([]int, 0, 8)
					} else {
						out.Delivery = []int{}
					}
				} else {
					out.Delivery = (out.Delivery)[:0]
				}
				for !in.IsDelim(']') {
					var v5 int
					v5 = int(in.Int())
					out.Delivery = append(out.Delivery, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pos":
			out.Pos = int(in.Int())
		case "companionad":
			if in.IsNull() {
				in.Skip()
				out.Companionad = nil
			} else {
				in.Delim('[')
				if out.Companionad == nil {
					if !in.IsDelim(']') {
						out.Companionad = make([]Banner, 0, 1)
					} else {
						out.Companionad = []Banner{}
					}
				} else {
					out.Companionad = (out.Companionad)[:0]
				}
				for !in.IsDelim(']') {
					var v6 Banner
					(v6).UnmarshalEasyJSON(in)
					out.Companionad = append(out.Companionad, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.Api = nil
			} else {
				in.Delim('[')
				if out.Api == nil {
					if !in.IsDelim(']') {
						out.Api = make([]int, 0, 8)
					} else {
						out.Api = []int{}
					}
				} else {
					out.Api = (out.Api)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int
					v7 = int(in.Int())
					out.Api = append(out.Api, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "companiontype":
			if in.IsNull() {
				in.Skip()
				out.Companiontype = nil
			} else {
				in.Delim('[')
				if out.Companiontype == nil {
					if !in.IsDelim(']') {
						out.Companiontype = make([]int, 0, 8)
					} else {
						out.Companiontype = []int{}
					}
				} else {
					out.Companiontype = (out.Companiontype)[:0]
				}
				for !in.IsDelim(']') {
					var v8 int
					v8 = int(in.Int())
					out.Companiontype = append(out.Companiontype, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 interface{}
					if m, ok := v9.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v9.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v9 = in.Interface()
					}
					(out.Ext)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb(out *jwriter.Writer, in Video) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Mimes) != 0 {
		const prefix string = ",\"mimes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.Mimes {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	if in.Minduration != 0 {
		const prefix string = ",\"minduration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Minduration))
	}
	if in.Maxduration != 0 {
		const prefix string = ",\"maxduration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Maxduration))
	}
	if in.Protocol != 0 {
		const prefix string = ",\"protocol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Protocol))
	}
	if len(in.Protocols) != 0 {
		const prefix string = ",\"protocols\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.Protocols {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v13))
			}
			out.RawByte(']')
		}
	}
	if in.W != 0 {
		const prefix string = ",\"w\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.W))
	}
	if in.H != 0 {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.H))
	}
	if in.Startdelay != 0 {
		const prefix string = ",\"startdelay\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Startdelay))
	}
	if in.Linearity != 0 {
		const prefix string = ",\"linearity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Linearity))
	}
	if in.Sequence != 0 {
		const prefix string = ",\"sequence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Sequence))
	}
	if len(in.Battr) != 0 {
		const prefix string = ",\"battr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Battr {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v15))
			}
			out.RawByte(']')
		}
	}
	if in.Maxextended != 0 {
		const prefix string = ",\"maxextended\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Maxextended))
	}
	if in.Minbitrate != 0 {
		const prefix string = ",\"minbitrate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Minbitrate))
	}
	if in.Maxbitrate != 0 {
		const prefix string = ",\"maxbitrate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Maxbitrate))
	}
	if in.Boxingallowed != 0 {
		const prefix string = ",\"boxingallowed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Boxingallowed))
	}
	if len(in.Playbackmethod) != 0 {
		const prefix string = ",\"playbackmethod\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.Playbackmethod {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v17))
			}
			out.RawByte(']')
		}
	}
	if len(in.Delivery) != 0 {
		const prefix string = ",\"delivery\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.Delivery {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v19))
			}
			out.RawByte(']')
		}
	}
	if in.Pos != 0 {
		const prefix string = ",\"pos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Pos))
	}
	if len(in.Companionad) != 0 {
		const prefix string = ",\"companionad\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Companionad {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Api) != 0 {
		const prefix string = ",\"api\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v22, v23 := range in.Api {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v23))
			}
			out.RawByte(']')
		}
	}
	if len(in.Companiontype) != 0 {
		const prefix string = ",\"companiontype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.Companiontype {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v25))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v26First := true
			for v26Name, v26Value := range in.Ext {
				if v26First {
					v26First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v26Name))
				out.RawByte(':')
				if m, ok := v26Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v26Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v26Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Video) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Video) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Video) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Video) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb1(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "buyeruid":
			out.Buyeruid = string(in.String())
		case "yob":
			out.Yob = int(in.Int())
		case "gender":
			out.Gender = string(in.String())
		case "keywords":
			out.Keywords = string(in.String())
		case "customdata":
			out.Customdata = string(in.String())
		case "geo":
			if in.IsNull() {
				in.Skip()
				out.Geo = nil
			} else {
				if out.Geo == nil {
					out.Geo = new(Geo)
				}
				(*out.Geo).UnmarshalEasyJSON(in)
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]Data, 0, 1)
					} else {
						out.Data = []Data{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v27 Data
					(v27).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v28 interface{}
					if m, ok := v28.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v28.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v28 = in.Interface()
					}
					(out.Ext)[key] = v28
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb1(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Buyeruid != "" {
		const prefix string = ",\"buyeruid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Buyeruid))
	}
	if in.Yob != 0 {
		const prefix string = ",\"yob\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Yob))
	}
	if in.Gender != "" {
		const prefix string = ",\"gender\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Gender))
	}
	if in.Keywords != "" {
		const prefix string = ",\"keywords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Keywords))
	}
	if in.Customdata != "" {
		const prefix string = ",\"customdata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Customdata))
	}
	if in.Geo != nil {
		const prefix string = ",\"geo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Geo).MarshalEasyJSON(out)
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Data {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v31First := true
			for v31Name, v31Value := range in.Ext {
				if v31First {
					v31First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v31Name))
				out.RawByte(':')
				if m, ok := v31Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v31Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v31Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb1(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb2(in *jlexer.Lexer, out *Title) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "len":
			out.Len = int(in.Int())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v32 interface{}
					if m, ok := v32.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v32.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v32 = in.Interface()
					}
					(out.Ext)[key] = v32
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb2(out *jwriter.Writer, in Title) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"len\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Len))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v33First := true
			for v33Name, v33Value := range in.Ext {
				if v33First {
					v33First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v33Name))
				out.RawByte(':')
				if m, ok := v33Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v33Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v33Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Title) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Title) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Title) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Title) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb2(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb3(in *jlexer.Lexer, out *ThirdParty) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.Cat = append(out.Cat, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "domain":
			out.Domain = string(in.String())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v35 interface{}
					if m, ok := v35.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v35.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v35 = in.Interface()
					}
					(out.Ext)[key] = v35
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb3(out *jwriter.Writer, in ThirdParty) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Cat) != 0 {
		const prefix string = ",\"cat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v36, v37 := range in.Cat {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.String(string(v37))
			}
			out.RawByte(']')
		}
	}
	if in.Domain != "" {
		const prefix string = ",\"domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v38First := true
			for v38Name, v38Value := range in.Ext {
				if v38First {
					v38First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v38Name))
				out.RawByte(':')
				if m, ok := v38Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v38Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v38Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ThirdParty) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ThirdParty) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ThirdParty) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ThirdParty) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb3(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb4(in *jlexer.Lexer, out *Site) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v39 string
					v39 = string(in.String())
					out.Cat = append(out.Cat, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sectioncat":
			if in.IsNull() {
				in.Skip()
				out.Sectioncat = nil
			} else {
				in.Delim('[')
				if out.Sectioncat == nil {
					if !in.IsDelim(']') {
						out.Sectioncat = make([]string, 0, 4)
					} else {
						out.Sectioncat = []string{}
					}
				} else {
					out.Sectioncat = (out.Sectioncat)[:0]
				}
				for !in.IsDelim(']') {
					var v40 string
					v40 = string(in.String())
					out.Sectioncat = append(out.Sectioncat, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pagecat":
			if in.IsNull() {
				in.Skip()
				out.Pagecat = nil
			} else {
				in.Delim('[')
				if out.Pagecat == nil {
					if !in.IsDelim(']') {
						out.Pagecat = make([]string, 0, 4)
					} else {
						out.Pagecat = []string{}
					}
				} else {
					out.Pagecat = (out.Pagecat)[:0]
				}
				for !in.IsDelim(']') {
					var v41 string
					v41 = string(in.String())
					out.Pagecat = append(out.Pagecat, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "page":
			out.Page = string(in.String())
		case "privacypolicy":
			out.Privacypolicy = int(in.Int())
		case "ref":
			out.Ref = string(in.String())
		case "search":
			out.Search = string(in.String())
		case "mobile":
			out.Mobile = int(in.Int())
		case "publisher":
			if in.IsNull() {
				in.Skip()
				out.Publisher = nil
			} else {
				if out.Publisher == nil {
					out.Publisher = new(Publisher)
				}
				easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb5(in, &*out.Publisher)
			}
		case "keywords":
			out.Keywords = string(in.String())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v42 interface{}
					if m, ok := v42.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v42.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v42 = in.Interface()
					}
					(out.Ext)[key] = v42
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb4(out *jwriter.Writer, in Site) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Domain != "" {
		const prefix string = ",\"domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	if len(in.Cat) != 0 {
		const prefix string = ",\"cat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v43, v44 := range in.Cat {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.String(string(v44))
			}
			out.RawByte(']')
		}
	}
	if len(in.Sectioncat) != 0 {
		const prefix string = ",\"sectioncat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v45, v46 := range in.Sectioncat {
				if v45 > 0 {
					out.RawByte(',')
				}
				out.String(string(v46))
			}
			out.RawByte(']')
		}
	}
	if len(in.Pagecat) != 0 {
		const prefix string = ",\"pagecat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v47, v48 := range in.Pagecat {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.String(string(v48))
			}
			out.RawByte(']')
		}
	}
	if in.Page != "" {
		const prefix string = ",\"page\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Page))
	}
	if in.Privacypolicy != 0 {
		const prefix string = ",\"privacypolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Privacypolicy))
	}
	if in.Ref != "" {
		const prefix string = ",\"ref\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ref))
	}
	if in.Search != "" {
		const prefix string = ",\"search\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Search))
	}
	if in.Mobile != 0 {
		const prefix string = ",\"mobile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Mobile))
	}
	if in.Publisher != nil {
		const prefix string = ",\"publisher\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb5(out, *in.Publisher)
	}
	if in.Keywords != "" {
		const prefix string = ",\"keywords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Keywords))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v49First := true
			for v49Name, v49Value := range in.Ext {
				if v49First {
					v49First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v49Name))
				out.RawByte(':')
				if m, ok := v49Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v49Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v49Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Site) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Site) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Site) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Site) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb4(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb5(in *jlexer.Lexer, out *Publisher) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v50 string
					v50 = string(in.String())
					out.Cat = append(out.Cat, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "domain":
			out.Domain = string(in.String())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v51 interface{}
					if m, ok := v51.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v51.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v51 = in.Interface()
					}
					(out.Ext)[key] = v51
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb5(out *jwriter.Writer, in Publisher) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Cat) != 0 {
		const prefix string = ",\"cat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v52, v53 := range in.Cat {
				if v52 > 0 {
					out.RawByte(',')
				}
				out.String(string(v53))
			}
			out.RawByte(']')
		}
	}
	if in.Domain != "" {
		const prefix string = ",\"domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v54First := true
			for v54Name, v54Value := range in.Ext {
				if v54First {
					v54First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v54Name))
				out.RawByte(':')
				if m, ok := v54Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v54Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v54Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb6(in *jlexer.Lexer, out *Segment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v55 interface{}
					if m, ok := v55.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v55.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v55 = in.Interface()
					}
					(out.Ext)[key] = v55
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb6(out *jwriter.Writer, in Segment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v56First := true
			for v56Name, v56Value := range in.Ext {
				if v56First {
					v56First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v56Name))
				out.RawByte(':')
				if m, ok := v56Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v56Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v56Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Segment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Segment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Segment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Segment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb6(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb7(in *jlexer.Lexer, out *Seatbid) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bid":
			if in.IsNull() {
				in.Skip()
				out.Bid = nil
			} else {
				in.Delim('[')
				if out.Bid == nil {
					if !in.IsDelim(']') {
						out.Bid = make([]Bid, 0, 1)
					} else {
						out.Bid = []Bid{}
					}
				} else {
					out.Bid = (out.Bid)[:0]
				}
				for !in.IsDelim(']') {
					var v57 Bid
					(v57).UnmarshalEasyJSON(in)
					out.Bid = append(out.Bid, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "seat":
			out.Seat = string(in.String())
		case "group":
			out.Group = int(in.Int())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v58 interface{}
					if m, ok := v58.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v58.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v58 = in.Interface()
					}
					(out.Ext)[key] = v58
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb7(out *jwriter.Writer, in Seatbid) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Bid == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v59, v60 := range in.Bid {
				if v59 > 0 {
					out.RawByte(',')
				}
				(v60).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Seat != "" {
		const prefix string = ",\"seat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Seat))
	}
	if in.Group != 0 {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Group))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v61First := true
			for v61Name, v61Value := range in.Ext {
				if v61First {
					v61First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v61Name))
				out.RawByte(':')
				if m, ok := v61Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v61Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v61Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Seatbid) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Seatbid) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Seatbid) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Seatbid) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb7(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb8(in *jlexer.Lexer, out *ResponseVideo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vasttag":
			out.Vasttag = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb8(out *jwriter.Writer, in ResponseVideo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"vasttag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Vasttag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseVideo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseVideo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseVideo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseVideo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb8(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb9(in *jlexer.Lexer, out *ResponseTitle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v62 interface{}
					if m, ok := v62.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v62.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v62 = in.Interface()
					}
					(out.Ext)[key] = v62
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb9(out *jwriter.Writer, in ResponseTitle) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v63First := true
			for v63Name, v63Value := range in.Ext {
				if v63First {
					v63First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v63Name))
				out.RawByte(':')
				if m, ok := v63Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v63Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v63Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseTitle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseTitle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseTitle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseTitle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb9(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb10(in *jlexer.Lexer, out *ResponseImg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.Url = string(in.String())
		case "w":
			out.W = int(in.Int())
		case "h":
			out.H = int(in.Int())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v64 interface{}
					if m, ok := v64.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v64.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v64 = in.Interface()
					}
					(out.Ext)[key] = v64
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb10(out *jwriter.Writer, in ResponseImg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	if in.W != 0 {
		const prefix string = ",\"w\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.W))
	}
	if in.H != 0 {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.H))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v65First := true
			for v65Name, v65Value := range in.Ext {
				if v65First {
					v65First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v65Name))
				out.RawByte(':')
				if m, ok := v65Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v65Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v65Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseImg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseImg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseImg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseImg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb10(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb11(in *jlexer.Lexer, out *ResponseData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "label":
			out.Label = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v66 interface{}
					if m, ok := v66.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v66.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v66 = in.Interface()
					}
					(out.Ext)[key] = v66
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb11(out *jwriter.Writer, in ResponseData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Label != "" {
		const prefix string = ",\"label\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Label))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v67First := true
			for v67Name, v67Value := range in.Ext {
				if v67First {
					v67First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v67Name))
				out.RawByte(':')
				if m, ok := v67Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v67Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v67Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb11(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb12(in *jlexer.Lexer, out *ResponseAsset) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "required":
			out.Required = int(in.Int())
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(ResponseTitle)
				}
				(*out.Title).UnmarshalEasyJSON(in)
			}
		case "img":
			if in.IsNull() {
				in.Skip()
				out.Img = nil
			} else {
				if out.Img == nil {
					out.Img = new(ResponseImg)
				}
				(*out.Img).UnmarshalEasyJSON(in)
			}
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				if out.Video == nil {
					out.Video = new(ResponseVideo)
				}
				(*out.Video).UnmarshalEasyJSON(in)
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(ResponseData)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		case "link":
			if in.IsNull() {
				in.Skip()
				out.Link = nil
			} else {
				if out.Link == nil {
					out.Link = new(Link)
				}
				(*out.Link).UnmarshalEasyJSON(in)
			}
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v68 interface{}
					if m, ok := v68.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v68.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v68 = in.Interface()
					}
					(out.Ext)[key] = v68
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb12(out *jwriter.Writer, in ResponseAsset) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	if in.Required != 0 {
		const prefix string = ",\"required\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Required))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Title).MarshalEasyJSON(out)
	}
	if in.Img != nil {
		const prefix string = ",\"img\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Img).MarshalEasyJSON(out)
	}
	if in.Video != nil {
		const prefix string = ",\"video\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Video).MarshalEasyJSON(out)
	}
	if in.Data != nil {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Data).MarshalEasyJSON(out)
	}
	if in.Link != nil {
		const prefix string = ",\"link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Link).MarshalEasyJSON(out)
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v69First := true
			for v69Name, v69Value := range in.Ext {
				if v69First {
					v69First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v69Name))
				out.RawByte(':')
				if m, ok := v69Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v69Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v69Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseAsset) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseAsset) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseAsset) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseAsset) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb12(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb13(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "seatbid":
			if in.IsNull() {
				in.Skip()
				out.Seatbid = nil
			} else {
				in.Delim('[')
				if out.Seatbid == nil {
					if !in.IsDelim(']') {
						out.Seatbid = make([]Seatbid, 0, 1)
					} else {
						out.Seatbid = []Seatbid{}
					}
				} else {
					out.Seatbid = (out.Seatbid)[:0]
				}
				for !in.IsDelim(']') {
					var v70 Seatbid
					(v70).UnmarshalEasyJSON(in)
					out.Seatbid = append(out.Seatbid, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bidid":
			out.Bidid = string(in.String())
		case "cur":
			out.Cur = string(in.String())
		case "customdata":
			out.Customdata = string(in.String())
		case "nbr":
			out.Nbr = int(in.Int())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v71 interface{}
					if m, ok := v71.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v71.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v71 = in.Interface()
					}
					(out.Ext)[key] = v71
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb13(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"seatbid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Seatbid == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v72, v73 := range in.Seatbid {
				if v72 > 0 {
					out.RawByte(',')
				}
				(v73).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Bidid != "" {
		const prefix string = ",\"bidid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bidid))
	}
	if in.Cur != "" {
		const prefix string = ",\"cur\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cur))
	}
	if in.Customdata != "" {
		const prefix string = ",\"customdata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Customdata))
	}
	if in.Nbr != 0 {
		const prefix string = ",\"nbr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Nbr))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v74First := true
			for v74Name, v74Value := range in.Ext {
				if v74First {
					v74First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v74Name))
				out.RawByte(':')
				if m, ok := v74Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v74Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v74Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb13(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb14(in *jlexer.Lexer, out *Request) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "imp":
			if in.IsNull() {
				in.Skip()
				out.Imp = nil
			} else {
				in.Delim('[')
				if out.Imp == nil {
					if !in.IsDelim(']') {
						out.Imp = make([]Impression, 0, 1)
					} else {
						out.Imp = []Impression{}
					}
				} else {
					out.Imp = (out.Imp)[:0]
				}
				for !in.IsDelim(']') {
					var v75 Impression
					(v75).UnmarshalEasyJSON(in)
					out.Imp = append(out.Imp, v75)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "site":
			if in.IsNull() {
				in.Skip()
				out.Site = nil
			} else {
				if out.Site == nil {
					out.Site = new(Site)
				}
				(*out.Site).UnmarshalEasyJSON(in)
			}
		case "app":
			if in.IsNull() {
				in.Skip()
				out.App = nil
			} else {
				if out.App == nil {
					out.App = new(App)
				}
				(*out.App).UnmarshalEasyJSON(in)
			}
		case "device":
			if in.IsNull() {
				in.Skip()
				out.Device = nil
			} else {
				if out.Device == nil {
					out.Device = new(Device)
				}
				(*out.Device).UnmarshalEasyJSON(in)
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "at":
			out.At = int(in.Int())
		case "tmax":
			out.Tmax = int(in.Int())
		case "wseat":
			if in.IsNull() {
				in.Skip()
				out.Wseat = nil
			} else {
				in.Delim('[')
				if out.Wseat == nil {
					if !in.IsDelim(']') {
						out.Wseat = make([]string, 0, 4)
					} else {
						out.Wseat = []string{}
					}
				} else {
					out.Wseat = (out.Wseat)[:0]
				}
				for !in.IsDelim(']') {
					var v76 string
					v76 = string(in.String())
					out.Wseat = append(out.Wseat, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "allimps":
			out.Allimps = int(in.Int())
		case "cur":
			if in.IsNull() {
				in.Skip()
				out.Cur = nil
			} else {
				in.Delim('[')
				if out.Cur == nil {
					if !in.IsDelim(']') {
						out.Cur = make([]string, 0, 4)
					} else {
						out.Cur = []string{}
					}
				} else {
					out.Cur = (out.Cur)[:0]
				}
				for !in.IsDelim(']') {
					var v77 string
					v77 = string(in.String())
					out.Cur = append(out.Cur, v77)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bcat":
			if in.IsNull() {
				in.Skip()
				out.Bcat = nil
			} else {
				in.Delim('[')
				if out.Bcat == nil {
					if !in.IsDelim(']') {
						out.Bcat = make([]string, 0, 4)
					} else {
						out.Bcat = []string{}
					}
				} else {
					out.Bcat = (out.Bcat)[:0]
				}
				for !in.IsDelim(']') {
					var v78 string
					v78 = string(in.String())
					out.Bcat = append(out.Bcat, v78)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "badv":
			if in.IsNull() {
				in.Skip()
				out.Badv = nil
			} else {
				in.Delim('[')
				if out.Badv == nil {
					if !in.IsDelim(']') {
						out.Badv = make([]string, 0, 4)
					} else {
						out.Badv = []string{}
					}
				} else {
					out.Badv = (out.Badv)[:0]
				}
				for !in.IsDelim(']') {
					var v79 string
					v79 = string(in.String())
					out.Badv = append(out.Badv, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "regs":
			if in.IsNull() {
				in.Skip()
				out.Regs = nil
			} else {
				if out.Regs == nil {
					out.Regs = new(Regulations)
				}
				(*out.Regs).UnmarshalEasyJSON(in)
			}
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v80 interface{}
					if m, ok := v80.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v80.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v80 = in.Interface()
					}
					(out.Ext)[key] = v80
					in.WantComma()
				}
				in.Delim('}')
			}
		case "pmp":
			if in.IsNull() {
				in.Skip()
				out.Pmp = nil
			} else {
				if out.Pmp == nil {
					out.Pmp = new(Pmp)
				}
				(*out.Pmp).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb14(out *jwriter.Writer, in Request) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if len(in.Imp) != 0 {
		const prefix string = ",\"imp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v81, v82 := range in.Imp {
				if v81 > 0 {
					out.RawByte(',')
				}
				(v82).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Site != nil {
		const prefix string = ",\"site\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Site).MarshalEasyJSON(out)
	}
	if in.App != nil {
		const prefix string = ",\"app\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.App).MarshalEasyJSON(out)
	}
	if in.Device != nil {
		const prefix string = ",\"device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Device).MarshalEasyJSON(out)
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.At))
	}
	if in.Tmax != 0 {
		const prefix string = ",\"tmax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Tmax))
	}
	if len(in.Wseat) != 0 {
		const prefix string = ",\"wseat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v83, v84 := range in.Wseat {
				if v83 > 0 {
					out.RawByte(',')
				}
				out.String(string(v84))
			}
			out.RawByte(']')
		}
	}
	if in.Allimps != 0 {
		const prefix string = ",\"allimps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Allimps))
	}
	if len(in.Cur) != 0 {
		const prefix string = ",\"cur\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v85, v86 := range in.Cur {
				if v85 > 0 {
					out.RawByte(',')
				}
				out.String(string(v86))
			}
			out.RawByte(']')
		}
	}
	if len(in.Bcat) != 0 {
		const prefix string = ",\"bcat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v87, v88 := range in.Bcat {
				if v87 > 0 {
					out.RawByte(',')
				}
				out.String(string(v88))
			}
			out.RawByte(']')
		}
	}
	if len(in.Badv) != 0 {
		const prefix string = ",\"badv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v89, v90 := range in.Badv {
				if v89 > 0 {
					out.RawByte(',')
				}
				out.String(string(v90))
			}
			out.RawByte(']')
		}
	}
	if in.Regs != nil {
		const prefix string = ",\"regs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Regs).MarshalEasyJSON(out)
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v91First := true
			for v91Name, v91Value := range in.Ext {
				if v91First {
					v91First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v91Name))
				out.RawByte(':')
				if m, ok := v91Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v91Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v91Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.Pmp != nil {
		const prefix string = ",\"pmp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Pmp).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Request) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Request) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Request) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Request) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb14(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb15(in *jlexer.Lexer, out *Regulations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coppa":
			out.Coppa = int(in.Int())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v92 interface{}
					if m, ok := v92.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v92.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v92 = in.Interface()
					}
					(out.Ext)[key] = v92
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb15(out *jwriter.Writer, in Regulations) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Coppa != 0 {
		const prefix string = ",\"coppa\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Coppa))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v93First := true
			for v93Name, v93Value := range in.Ext {
				if v93First {
					v93First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v93Name))
				out.RawByte(':')
				if m, ok := v93Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v93Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v93Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Regulations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Regulations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Regulations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Regulations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb15(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb16(in *jlexer.Lexer, out *Pmp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "private_auction":
			out.Private = int(in.Int())
		case "deals":
			if in.IsNull() {
				in.Skip()
				out.Deals = nil
			} else {
				in.Delim('[')
				if out.Deals == nil {
					if !in.IsDelim(']') {
						out.Deals = make([]DirectDeal, 0, 1)
					} else {
						out.Deals = []DirectDeal{}
					}
				} else {
					out.Deals = (out.Deals)[:0]
				}
				for !in.IsDelim(']') {
					var v94 DirectDeal
					(v94).UnmarshalEasyJSON(in)
					out.Deals = append(out.Deals, v94)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v95 interface{}
					if m, ok := v95.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v95.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v95 = in.Interface()
					}
					(out.Ext)[key] = v95
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb16(out *jwriter.Writer, in Pmp) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Private != 0 {
		const prefix string = ",\"private_auction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Private))
	}
	if len(in.Deals) != 0 {
		const prefix string = ",\"deals\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v96, v97 := range in.Deals {
				if v96 > 0 {
					out.RawByte(',')
				}
				(v97).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v98First := true
			for v98Name, v98Value := range in.Ext {
				if v98First {
					v98First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v98Name))
				out.RawByte(':')
				if m, ok := v98Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v98Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v98Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pmp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pmp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pmp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pmp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb16(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb17(in *jlexer.Lexer, out *NativeVideo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.Mimes = nil
			} else {
				in.Delim('[')
				if out.Mimes == nil {
					if !in.IsDelim(']') {
						out.Mimes = make([]string, 0, 4)
					} else {
						out.Mimes = []string{}
					}
				} else {
					out.Mimes = (out.Mimes)[:0]
				}
				for !in.IsDelim(']') {
					var v99 string
					v99 = string(in.String())
					out.Mimes = append(out.Mimes, v99)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "minduration":
			out.Minduration = int(in.Int())
		case "maxduration":
			out.Maxduration = int(in.Int())
		case "protocol":
			out.Protocol = int(in.Int())
		case "protocols":
			if in.IsNull() {
				in.Skip()
				out.Protocols = nil
			} else {
				in.Delim('[')
				if out.Protocols == nil {
					if !in.IsDelim(']') {
						out.Protocols = make([]int, 0, 8)
					} else {
						out.Protocols = []int{}
					}
				} else {
					out.Protocols = (out.Protocols)[:0]
				}
				for !in.IsDelim(']') {
					var v100 int
					v100 = int(in.Int())
					out.Protocols = append(out.Protocols, v100)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "w":
			out.W = int(in.Int())
		case "h":
			out.H = int(in.Int())
		case "startdelay":
			out.Startdelay = int(in.Int())
		case "linearity":
			out.Linearity = int(in.Int())
		case "sequence":
			out.Sequence = int(in.Int())
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.Battr = nil
			} else {
				in.Delim('[')
				if out.Battr == nil {
					if !in.IsDelim(']') {
						out.Battr = make([]int, 0, 8)
					} else {
						out.Battr = []int{}
					}
				} else {
					out.Battr = (out.Battr)[:0]
				}
				for !in.IsDelim(']') {
					var v101 int
					v101 = int(in.Int())
					out.Battr = append(out.Battr, v101)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maxextended":
			out.Maxextended = int(in.Int())
		case "minbitrate":
			out.Minbitrate = int(in.Int())
		case "maxbitrate":
			out.Maxbitrate = int(in.Int())
		case "boxingallowed":
			out.Boxingallowed = int(in.Int())
		case "playbackmethod":
			if in.IsNull() {
				in.Skip()
				out.Playbackmethod = nil
			} else {
				in.Delim('[')
				if out.Playbackmethod == nil {
					if !in.IsDelim(']') {
						out.Playbackmethod = make([]int, 0, 8)
					} else {
						out.Playbackmethod = []int{}
					}
				} else {
					out.Playbackmethod = (out.Playbackmethod)[:0]
				}
				for !in.IsDelim(']') {
					var v102 int
					v102 = int(in.Int())
					out.Playbackmethod = append(out.Playbackmethod, v102)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "delivery":
			if in.IsNull() {
				in.Skip()
				out.Delivery = nil
			} else {
				in.Delim('[')
				if out.Delivery == nil {
					if !in.IsDelim(']') {
						out.Delivery = make([]int, 0, 8)
					} else {
						out.Delivery = []int{}
					}
				} else {
					out.Delivery = (out.Delivery)[:0]
				}
				for !in.IsDelim(']') {
					var v103 int
					v103 = int(in.Int())
					out.Delivery = append(out.Delivery, v103)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pos":
			out.Pos = int(in.Int())
		case "companionad":
			if in.IsNull() {
				in.Skip()
				out.Companionad = nil
			} else {
				in.Delim('[')
				if out.Companionad == nil {
					if !in.IsDelim(']') {
						out.Companionad = make([]Banner, 0, 1)
					} else {
						out.Companionad = []Banner{}
					}
				} else {
					out.Companionad = (out.Companionad)[:0]
				}
				for !in.IsDelim(']') {
					var v104 Banner
					(v104).UnmarshalEasyJSON(in)
					out.Companionad = append(out.Companionad, v104)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.Api = nil
			} else {
				in.Delim('[')
				if out.Api == nil {
					if !in.IsDelim(']') {
						out.Api = make([]int, 0, 8)
					} else {
						out.Api = []int{}
					}
				} else {
					out.Api = (out.Api)[:0]
				}
				for !in.IsDelim(']') {
					var v105 int
					v105 = int(in.Int())
					out.Api = append(out.Api, v105)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "companiontype":
			if in.IsNull() {
				in.Skip()
				out.Companiontype = nil
			} else {
				in.Delim('[')
				if out.Companiontype == nil {
					if !in.IsDelim(']') {
						out.Companiontype = make([]int, 0, 8)
					} else {
						out.Companiontype = []int{}
					}
				} else {
					out.Companiontype = (out.Companiontype)[:0]
				}
				for !in.IsDelim(']') {
					var v106 int
					v106 = int(in.Int())
					out.Companiontype = append(out.Companiontype, v106)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v107 interface{}
					if m, ok := v107.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v107.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v107 = in.Interface()
					}
					(out.Ext)[key] = v107
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb17(out *jwriter.Writer, in NativeVideo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mimes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Mimes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v108, v109 := range in.Mimes {
				if v108 > 0 {
					out.RawByte(',')
				}
				out.String(string(v109))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"minduration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Minduration))
	}
	{
		const prefix string = ",\"maxduration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Maxduration))
	}
	if in.Protocol != 0 {
		const prefix string = ",\"protocol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Protocol))
	}
	{
		const prefix string = ",\"protocols\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Protocols == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v110, v111 := range in.Protocols {
				if v110 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v111))
			}
			out.RawByte(']')
		}
	}
	if in.W != 0 {
		const prefix string = ",\"w\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.W))
	}
	if in.H != 0 {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.H))
	}
	if in.Startdelay != 0 {
		const prefix string = ",\"startdelay\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Startdelay))
	}
	if in.Linearity != 0 {
		const prefix string = ",\"linearity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Linearity))
	}
	if in.Sequence != 0 {
		const prefix string = ",\"sequence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Sequence))
	}
	if len(in.Battr) != 0 {
		const prefix string = ",\"battr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v112, v113 := range in.Battr {
				if v112 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v113))
			}
			out.RawByte(']')
		}
	}
	if in.Maxextended != 0 {
		const prefix string = ",\"maxextended\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Maxextended))
	}
	if in.Minbitrate != 0 {
		const prefix string = ",\"minbitrate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Minbitrate))
	}
	if in.Maxbitrate != 0 {
		const prefix string = ",\"maxbitrate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Maxbitrate))
	}
	if in.Boxingallowed != 0 {
		const prefix string = ",\"boxingallowed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Boxingallowed))
	}
	if len(in.Playbackmethod) != 0 {
		const prefix string = ",\"playbackmethod\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v114, v115 := range in.Playbackmethod {
				if v114 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v115))
			}
			out.RawByte(']')
		}
	}
	if len(in.Delivery) != 0 {
		const prefix string = ",\"delivery\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v116, v117 := range in.Delivery {
				if v116 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v117))
			}
			out.RawByte(']')
		}
	}
	if in.Pos != 0 {
		const prefix string = ",\"pos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Pos))
	}
	if len(in.Companionad) != 0 {
		const prefix string = ",\"companionad\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v118, v119 := range in.Companionad {
				if v118 > 0 {
					out.RawByte(',')
				}
				(v119).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Api) != 0 {
		const prefix string = ",\"api\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v120, v121 := range in.Api {
				if v120 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v121))
			}
			out.RawByte(']')
		}
	}
	if len(in.Companiontype) != 0 {
		const prefix string = ",\"companiontype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v122, v123 := range in.Companiontype {
				if v122 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v123))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v124First := true
			for v124Name, v124Value := range in.Ext {
				if v124First {
					v124First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v124Name))
				out.RawByte(':')
				if m, ok := v124Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v124Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v124Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NativeVideo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NativeVideo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NativeVideo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NativeVideo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb17(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb18(in *jlexer.Lexer, out *NativeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ver":
			out.Ver = string(in.String())
		case "assets":
			if in.IsNull() {
				in.Skip()
				out.Assets = nil
			} else {
				in.Delim('[')
				if out.Assets == nil {
					if !in.IsDelim(']') {
						out.Assets = make([]ResponseAsset, 0, 1)
					} else {
						out.Assets = []ResponseAsset{}
					}
				} else {
					out.Assets = (out.Assets)[:0]
				}
				for !in.IsDelim(']') {
					var v125 ResponseAsset
					(v125).UnmarshalEasyJSON(in)
					out.Assets = append(out.Assets, v125)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "link":
			if in.IsNull() {
				in.Skip()
				out.Link = nil
			} else {
				if out.Link == nil {
					out.Link = new(Link)
				}
				(*out.Link).UnmarshalEasyJSON(in)
			}
		case "imptrackers":
			if in.IsNull() {
				in.Skip()
				out.Imptrackers = nil
			} else {
				in.Delim('[')
				if out.Imptrackers == nil {
					if !in.IsDelim(']') {
						out.Imptrackers = make([]string, 0, 4)
					} else {
						out.Imptrackers = []string{}
					}
				} else {
					out.Imptrackers = (out.Imptrackers)[:0]
				}
				for !in.IsDelim(']') {
					var v126 string
					v126 = string(in.String())
					out.Imptrackers = append(out.Imptrackers, v126)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "jstracker":
			out.Jstracker = string(in.String())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v127 interface{}
					if m, ok := v127.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v127.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v127 = in.Interface()
					}
					(out.Ext)[key] = v127
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb18(out *jwriter.Writer, in NativeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ver != "" {
		const prefix string = ",\"ver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ver))
	}
	{
		const prefix string = ",\"assets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Assets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v128, v129 := range in.Assets {
				if v128 > 0 {
					out.RawByte(',')
				}
				(v129).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Link == nil {
			out.RawString("null")
		} else {
			(*in.Link).MarshalEasyJSON(out)
		}
	}
	if len(in.Imptrackers) != 0 {
		const prefix string = ",\"imptrackers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v130, v131 := range in.Imptrackers {
				if v130 > 0 {
					out.RawByte(',')
				}
				out.String(string(v131))
			}
			out.RawByte(']')
		}
	}
	if in.Jstracker != "" {
		const prefix string = ",\"jstracker\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Jstracker))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v132First := true
			for v132Name, v132Value := range in.Ext {
				if v132First {
					v132First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v132Name))
				out.RawByte(':')
				if m, ok := v132Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v132Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v132Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NativeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NativeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NativeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NativeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb18(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb19(in *jlexer.Lexer, out *NativeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ver":
			out.Ver = string(in.String())
		case "layout":
			out.Layout = int(in.Int())
		case "adunit":
			out.Adunit = int(in.Int())
		case "plcmtcnt":
			out.Plcmtcnt = int(in.Int())
		case "seq":
			out.Seq = int(in.Int())
		case "assets":
			if in.IsNull() {
				in.Skip()
				out.Assets = nil
			} else {
				in.Delim('[')
				if out.Assets == nil {
					if !in.IsDelim(']') {
						out.Assets = make([]Asset, 0, 1)
					} else {
						out.Assets = []Asset{}
					}
				} else {
					out.Assets = (out.Assets)[:0]
				}
				for !in.IsDelim(']') {
					var v133 Asset
					(v133).UnmarshalEasyJSON(in)
					out.Assets = append(out.Assets, v133)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v134 interface{}
					if m, ok := v134.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v134.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v134 = in.Interface()
					}
					(out.Ext)[key] = v134
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb19(out *jwriter.Writer, in NativeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ver != "" {
		const prefix string = ",\"ver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ver))
	}
	if in.Layout != 0 {
		const prefix string = ",\"layout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Layout))
	}
	if in.Adunit != 0 {
		const prefix string = ",\"adunit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Adunit))
	}
	if in.Plcmtcnt != 0 {
		const prefix string = ",\"plcmtcnt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Plcmtcnt))
	}
	if in.Seq != 0 {
		const prefix string = ",\"seq\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Seq))
	}
	{
		const prefix string = ",\"assets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Assets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v135, v136 := range in.Assets {
				if v135 > 0 {
					out.RawByte(',')
				}
				(v136).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v137First := true
			for v137Name, v137Value := range in.Ext {
				if v137First {
					v137First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v137Name))
				out.RawByte(':')
				if m, ok := v137Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v137Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v137Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NativeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NativeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NativeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NativeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb19(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb20(in *jlexer.Lexer, out *NativeData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int(in.Int())
		case "len":
			out.Len = int(in.Int())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v138 interface{}
					if m, ok := v138.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v138.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v138 = in.Interface()
					}
					(out.Ext)[key] = v138
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb20(out *jwriter.Writer, in NativeData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	if in.Len != 0 {
		const prefix string = ",\"len\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Len))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v139First := true
			for v139Name, v139Value := range in.Ext {
				if v139First {
					v139First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v139Name))
				out.RawByte(':')
				if m, ok := v139Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v139Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v139Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NativeData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NativeData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NativeData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NativeData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb20(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb21(in *jlexer.Lexer, out *NativeAdm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "native":
			if in.IsNull() {
				in.Skip()
				out.Native = nil
			} else {
				if out.Native == nil {
					out.Native = new(NativeResponse)
				}
				(*out.Native).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb21(out *jwriter.Writer, in NativeAdm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Native != nil {
		const prefix string = ",\"native\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Native).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NativeAdm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NativeAdm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NativeAdm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NativeAdm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb21(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb22(in *jlexer.Lexer, out *Native) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "request":
			out.Request = string(in.String())
		case "ver":
			out.Ver = string(in.String())
		case "api":
			if in.IsNull() {
				in.Skip()
				out.Api = nil
			} else {
				in.Delim('[')
				if out.Api == nil {
					if !in.IsDelim(']') {
						out.Api = make([]int, 0, 8)
					} else {
						out.Api = []int{}
					}
				} else {
					out.Api = (out.Api)[:0]
				}
				for !in.IsDelim(']') {
					var v140 int
					v140 = int(in.Int())
					out.Api = append(out.Api, v140)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.Battr = nil
			} else {
				in.Delim('[')
				if out.Battr == nil {
					if !in.IsDelim(']') {
						out.Battr = make([]int, 0, 8)
					} else {
						out.Battr = []int{}
					}
				} else {
					out.Battr = (out.Battr)[:0]
				}
				for !in.IsDelim(']') {
					var v141 int
					v141 = int(in.Int())
					out.Battr = append(out.Battr, v141)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v142 interface{}
					if m, ok := v142.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v142.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v142 = in.Interface()
					}
					(out.Ext)[key] = v142
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb22(out *jwriter.Writer, in Native) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"request\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Request))
	}
	if in.Ver != "" {
		const prefix string = ",\"ver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ver))
	}
	if len(in.Api) != 0 {
		const prefix string = ",\"api\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v143, v144 := range in.Api {
				if v143 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v144))
			}
			out.RawByte(']')
		}
	}
	if len(in.Battr) != 0 {
		const prefix string = ",\"battr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v145, v146 := range in.Battr {
				if v145 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v146))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v147First := true
			for v147Name, v147Value := range in.Ext {
				if v147First {
					v147First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v147Name))
				out.RawByte(':')
				if m, ok := v147Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v147Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v147Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Native) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Native) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Native) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Native) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb22(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb23(in *jlexer.Lexer, out *Link) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.Url = string(in.String())
		case "clicktrackers":
			if in.IsNull() {
				in.Skip()
				out.Clicktrackers = nil
			} else {
				in.Delim('[')
				if out.Clicktrackers == nil {
					if !in.IsDelim(']') {
						out.Clicktrackers = make([]string, 0, 4)
					} else {
						out.Clicktrackers = []string{}
					}
				} else {
					out.Clicktrackers = (out.Clicktrackers)[:0]
				}
				for !in.IsDelim(']') {
					var v148 string
					v148 = string(in.String())
					out.Clicktrackers = append(out.Clicktrackers, v148)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fallback":
			out.Fallback = string(in.String())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v149 interface{}
					if m, ok := v149.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v149.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v149 = in.Interface()
					}
					(out.Ext)[key] = v149
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb23(out *jwriter.Writer, in Link) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	if len(in.Clicktrackers) != 0 {
		const prefix string = ",\"clicktrackers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v150, v151 := range in.Clicktrackers {
				if v150 > 0 {
					out.RawByte(',')
				}
				out.String(string(v151))
			}
			out.RawByte(']')
		}
	}
	if in.Fallback != "" {
		const prefix string = ",\"fallback\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Fallback))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v152First := true
			for v152Name, v152Value := range in.Ext {
				if v152First {
					v152First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v152Name))
				out.RawByte(':')
				if m, ok := v152Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v152Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v152Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Link) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Link) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Link) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Link) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb23(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb24(in *jlexer.Lexer, out *Impression) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "banner":
			if in.IsNull() {
				in.Skip()
				out.Banner = nil
			} else {
				if out.Banner == nil {
					out.Banner = new(Banner)
				}
				(*out.Banner).UnmarshalEasyJSON(in)
			}
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				if out.Video == nil {
					out.Video = new(Video)
				}
				(*out.Video).UnmarshalEasyJSON(in)
			}
		case "native":
			if in.IsNull() {
				in.Skip()
				out.Native = nil
			} else {
				if out.Native == nil {
					out.Native = new(Native)
				}
				(*out.Native).UnmarshalEasyJSON(in)
			}
		case "displaymanager":
			out.Displaymanager = string(in.String())
		case "displaymanagerver":
			out.Displaymanagerver = string(in.String())
		case "instl":
			out.Instl = int(in.Int())
		case "tagid":
			out.Tagid = string(in.String())
		case "bidfloor":
			out.Bidfloor = float32(in.Float32())
		case "bidfloorcur":
			out.Bidfloorcur = string(in.String())
		case "secure":
			out.Secure = int(in.Int())
		case "iframebuster":
			if in.IsNull() {
				in.Skip()
				out.Iframebuster = nil
			} else {
				in.Delim('[')
				if out.Iframebuster == nil {
					if !in.IsDelim(']') {
						out.Iframebuster = make([]string, 0, 4)
					} else {
						out.Iframebuster = []string{}
					}
				} else {
					out.Iframebuster = (out.Iframebuster)[:0]
				}
				for !in.IsDelim(']') {
					var v153 string
					v153 = string(in.String())
					out.Iframebuster = append(out.Iframebuster, v153)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pmp":
			if in.IsNull() {
				in.Skip()
				out.Pmp = nil
			} else {
				if out.Pmp == nil {
					out.Pmp = new(Pmp)
				}
				(*out.Pmp).UnmarshalEasyJSON(in)
			}
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v154 interface{}
					if m, ok := v154.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v154.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v154 = in.Interface()
					}
					(out.Ext)[key] = v154
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb24(out *jwriter.Writer, in Impression) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Banner != nil {
		const prefix string = ",\"banner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Banner).MarshalEasyJSON(out)
	}
	if in.Video != nil {
		const prefix string = ",\"video\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Video).MarshalEasyJSON(out)
	}
	if in.Native != nil {
		const prefix string = ",\"native\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Native).MarshalEasyJSON(out)
	}
	if in.Displaymanager != "" {
		const prefix string = ",\"displaymanager\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Displaymanager))
	}
	if in.Displaymanagerver != "" {
		const prefix string = ",\"displaymanagerver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Displaymanagerver))
	}
	if in.Instl != 0 {
		const prefix string = ",\"instl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Instl))
	}
	if in.Tagid != "" {
		const prefix string = ",\"tagid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tagid))
	}
	if in.Bidfloor != 0 {
		const prefix string = ",\"bidfloor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Bidfloor))
	}
	if in.Bidfloorcur != "" {
		const prefix string = ",\"bidfloorcur\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bidfloorcur))
	}
	if in.Secure != 0 {
		const prefix string = ",\"secure\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Secure))
	}
	if len(in.Iframebuster) != 0 {
		const prefix string = ",\"iframebuster\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v155, v156 := range in.Iframebuster {
				if v155 > 0 {
					out.RawByte(',')
				}
				out.String(string(v156))
			}
			out.RawByte(']')
		}
	}
	if in.Pmp != nil {
		const prefix string = ",\"pmp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Pmp).MarshalEasyJSON(out)
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v157First := true
			for v157Name, v157Value := range in.Ext {
				if v157First {
					v157First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v157Name))
				out.RawByte(':')
				if m, ok := v157Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v157Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v157Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Impression) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Impression) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Impression) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Impression) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb24(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb25(in *jlexer.Lexer, out *Image) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int(in.Int())
		case "w":
			out.W = int(in.Int())
		case "h":
			out.H = int(in.Int())
		case "wmax":
			out.Wmax = int(in.Int())
		case "hmax":
			out.Hmax = int(in.Int())
		case "wmin":
			out.Wmin = int(in.Int())
		case "hmin":
			out.Hmin = int(in.Int())
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.Mimes = nil
			} else {
				in.Delim('[')
				if out.Mimes == nil {
					if !in.IsDelim(']') {
						out.Mimes = make([]string, 0, 4)
					} else {
						out.Mimes = []string{}
					}
				} else {
					out.Mimes = (out.Mimes)[:0]
				}
				for !in.IsDelim(']') {
					var v158 string
					v158 = string(in.String())
					out.Mimes = append(out.Mimes, v158)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v159 interface{}
					if m, ok := v159.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v159.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v159 = in.Interface()
					}
					(out.Ext)[key] = v159
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb25(out *jwriter.Writer, in Image) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	if in.W != 0 {
		const prefix string = ",\"w\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.W))
	}
	if in.H != 0 {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.H))
	}
	if in.Wmax != 0 {
		const prefix string = ",\"wmax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Wmax))
	}
	if in.Hmax != 0 {
		const prefix string = ",\"hmax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Hmax))
	}
	if in.Wmin != 0 {
		const prefix string = ",\"wmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Wmin))
	}
	if in.Hmin != 0 {
		const prefix string = ",\"hmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Hmin))
	}
	if len(in.Mimes) != 0 {
		const prefix string = ",\"mimes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v160, v161 := range in.Mimes {
				if v160 > 0 {
					out.RawByte(',')
				}
				out.String(string(v161))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v162First := true
			for v162Name, v162Value := range in.Ext {
				if v162First {
					v162First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v162Name))
				out.RawByte(':')
				if m, ok := v162Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v162Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v162Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Image) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Image) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Image) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Image) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb25(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb26(in *jlexer.Lexer, out *Geo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lat":
			out.Lat = float64(in.Float64())
		case "lon":
			out.Lon = float64(in.Float64())
		case "country":
			out.Country = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "regionfips104":
			out.Regionfips104 = string(in.String())
		case "metro":
			out.Metro = string(in.String())
		case "city":
			out.City = string(in.String())
		case "zip":
			out.Zip = string(in.String())
		case "type":
			out.Type = int(in.Int())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v163 interface{}
					if m, ok := v163.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v163.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v163 = in.Interface()
					}
					(out.Ext)[key] = v163
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb26(out *jwriter.Writer, in Geo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Lat != 0 {
		const prefix string = ",\"lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Lon))
	}
	if in.Country != "" {
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Country))
	}
	if in.Region != "" {
		const prefix string = ",\"region\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Region))
	}
	if in.Regionfips104 != "" {
		const prefix string = ",\"regionfips104\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Regionfips104))
	}
	if in.Metro != "" {
		const prefix string = ",\"metro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Metro))
	}
	if in.City != "" {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	if in.Zip != "" {
		const prefix string = ",\"zip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Zip))
	}
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v164First := true
			for v164Name, v164Value := range in.Ext {
				if v164First {
					v164First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v164Name))
				out.RawByte(':')
				if m, ok := v164Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v164Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v164Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Geo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Geo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Geo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Geo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb26(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb27(in *jlexer.Lexer, out *DirectDeal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "bidfloor":
			out.Bidfloor = float32(in.Float32())
		case "bidfloorcur":
			out.Bidfloorcur = string(in.String())
		case "wseat":
			if in.IsNull() {
				in.Skip()
				out.Wseat = nil
			} else {
				in.Delim('[')
				if out.Wseat == nil {
					if !in.IsDelim(']') {
						out.Wseat = make([]string, 0, 4)
					} else {
						out.Wseat = []string{}
					}
				} else {
					out.Wseat = (out.Wseat)[:0]
				}
				for !in.IsDelim(']') {
					var v165 string
					v165 = string(in.String())
					out.Wseat = append(out.Wseat, v165)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "wadomain":
			if in.IsNull() {
				in.Skip()
				out.Wadomain = nil
			} else {
				in.Delim('[')
				if out.Wadomain == nil {
					if !in.IsDelim(']') {
						out.Wadomain = make([]string, 0, 4)
					} else {
						out.Wadomain = []string{}
					}
				} else {
					out.Wadomain = (out.Wadomain)[:0]
				}
				for !in.IsDelim(']') {
					var v166 string
					v166 = string(in.String())
					out.Wadomain = append(out.Wadomain, v166)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "at":
			out.At = int(in.Int())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v167 interface{}
					if m, ok := v167.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v167.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v167 = in.Interface()
					}
					(out.Ext)[key] = v167
					in.WantComma()
				}
				in.Delim('}')
			}
		case "seats":
			if in.IsNull() {
				in.Skip()
				out.Seats = nil
			} else {
				in.Delim('[')
				if out.Seats == nil {
					if !in.IsDelim(']') {
						out.Seats = make([]string, 0, 4)
					} else {
						out.Seats = []string{}
					}
				} else {
					out.Seats = (out.Seats)[:0]
				}
				for !in.IsDelim(']') {
					var v168 string
					v168 = string(in.String())
					out.Seats = append(out.Seats, v168)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "type":
			out.Type = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb27(out *jwriter.Writer, in DirectDeal) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Bidfloor != 0 {
		const prefix string = ",\"bidfloor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Bidfloor))
	}
	if in.Bidfloorcur != "" {
		const prefix string = ",\"bidfloorcur\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bidfloorcur))
	}
	if len(in.Wseat) != 0 {
		const prefix string = ",\"wseat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v169, v170 := range in.Wseat {
				if v169 > 0 {
					out.RawByte(',')
				}
				out.String(string(v170))
			}
			out.RawByte(']')
		}
	}
	if len(in.Wadomain) != 0 {
		const prefix string = ",\"wadomain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v171, v172 := range in.Wadomain {
				if v171 > 0 {
					out.RawByte(',')
				}
				out.String(string(v172))
			}
			out.RawByte(']')
		}
	}
	if in.At != 0 {
		const prefix string = ",\"at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.At))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v173First := true
			for v173Name, v173Value := range in.Ext {
				if v173First {
					v173First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v173Name))
				out.RawByte(':')
				if m, ok := v173Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v173Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v173Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Seats) != 0 {
		const prefix string = ",\"seats\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v174, v175 := range in.Seats {
				if v174 > 0 {
					out.RawByte(',')
				}
				out.String(string(v175))
			}
			out.RawByte(']')
		}
	}
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DirectDeal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DirectDeal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DirectDeal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DirectDeal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb27(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb28(in *jlexer.Lexer, out *Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dnt":
			out.Dnt = int(in.Int())
		case "lmt":
			out.Lmt = int(in.Int())
		case "ua":
			out.Ua = string(in.String())
		case "ip":
			out.Ip = string(in.String())
		case "geo":
			if in.IsNull() {
				in.Skip()
				out.Geo = nil
			} else {
				if out.Geo == nil {
					out.Geo = new(Geo)
				}
				(*out.Geo).UnmarshalEasyJSON(in)
			}
		case "didsha1":
			out.Didsha1 = string(in.String())
		case "didmd5":
			out.Didmd5 = string(in.String())
		case "dpidsha1":
			out.Dpidsha1 = string(in.String())
		case "dpidmd5":
			out.Dpidmd5 = string(in.String())
		case "macsha1":
			out.Macsha1 = string(in.String())
		case "macmd5":
			out.Macmd5 = string(in.String())
		case "ipv6":
			out.Ipv6 = string(in.String())
		case "carrier":
			out.Carrier = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "make":
			out.Make = string(in.String())
		case "model":
			out.Model = string(in.String())
		case "os":
			out.Os = string(in.String())
		case "osv":
			out.Osv = string(in.String())
		case "js":
			out.Js = int(in.Int())
		case "hwv":
			out.Hwv = string(in.String())
		case "ppi":
			out.Ppi = int(in.Int())
		case "pxratio":
			out.Pxratio = float32(in.Float32())
		case "h":
			out.H = int(in.Int())
		case "w":
			out.W = int(in.Int())
		case "connectiontype":
			out.Connectiontype = int(in.Int())
		case "devicetype":
			out.Devicetype = int(in.Int())
		case "flashver":
			out.Flashver = string(in.String())
		case "ifa":
			out.Ifa = string(in.String())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v176 interface{}
					if m, ok := v176.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v176.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v176 = in.Interface()
					}
					(out.Ext)[key] = v176
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb28(out *jwriter.Writer, in Device) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Dnt != 0 {
		const prefix string = ",\"dnt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Dnt))
	}
	if in.Lmt != 0 {
		const prefix string = ",\"lmt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Lmt))
	}
	if in.Ua != "" {
		const prefix string = ",\"ua\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ua))
	}
	if in.Ip != "" {
		const prefix string = ",\"ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ip))
	}
	if in.Geo != nil {
		const prefix string = ",\"geo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Geo).MarshalEasyJSON(out)
	}
	if in.Didsha1 != "" {
		const prefix string = ",\"didsha1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Didsha1))
	}
	if in.Didmd5 != "" {
		const prefix string = ",\"didmd5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Didmd5))
	}
	if in.Dpidsha1 != "" {
		const prefix string = ",\"dpidsha1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Dpidsha1))
	}
	if in.Dpidmd5 != "" {
		const prefix string = ",\"dpidmd5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Dpidmd5))
	}
	if in.Macsha1 != "" {
		const prefix string = ",\"macsha1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Macsha1))
	}
	if in.Macmd5 != "" {
		const prefix string = ",\"macmd5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Macmd5))
	}
	if in.Ipv6 != "" {
		const prefix string = ",\"ipv6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ipv6))
	}
	if in.Carrier != "" {
		const prefix string = ",\"carrier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Carrier))
	}
	if in.Language != "" {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Language))
	}
	if in.Make != "" {
		const prefix string = ",\"make\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Make))
	}
	if in.Model != "" {
		const prefix string = ",\"model\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Model))
	}
	if in.Os != "" {
		const prefix string = ",\"os\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Os))
	}
	if in.Osv != "" {
		const prefix string = ",\"osv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Osv))
	}
	if in.Js != 0 {
		const prefix string = ",\"js\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Js))
	}
	if in.Hwv != "" {
		const prefix string = ",\"hwv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hwv))
	}
	if in.Ppi != 0 {
		const prefix string = ",\"ppi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Ppi))
	}
	if in.Pxratio != 0 {
		const prefix string = ",\"pxratio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pxratio))
	}
	if in.H != 0 {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.H))
	}
	if in.W != 0 {
		const prefix string = ",\"w\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.W))
	}
	if in.Connectiontype != 0 {
		const prefix string = ",\"connectiontype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Connectiontype))
	}
	if in.Devicetype != 0 {
		const prefix string = ",\"devicetype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Devicetype))
	}
	if in.Flashver != "" {
		const prefix string = ",\"flashver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Flashver))
	}
	if in.Ifa != "" {
		const prefix string = ",\"ifa\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ifa))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v177First := true
			for v177Name, v177Value := range in.Ext {
				if v177First {
					v177First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v177Name))
				out.RawByte(':')
				if m, ok := v177Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v177Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v177Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Device) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Device) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Device) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Device) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb28(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb29(in *jlexer.Lexer, out *Data) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "segment":
			if in.IsNull() {
				in.Skip()
				out.Segment = nil
			} else {
				in.Delim('[')
				if out.Segment == nil {
					if !in.IsDelim(']') {
						out.Segment = make([]Segment, 0, 1)
					} else {
						out.Segment = []Segment{}
					}
				} else {
					out.Segment = (out.Segment)[:0]
				}
				for !in.IsDelim(']') {
					var v178 Segment
					(v178).UnmarshalEasyJSON(in)
					out.Segment = append(out.Segment, v178)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v179 interface{}
					if m, ok := v179.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v179.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v179 = in.Interface()
					}
					(out.Ext)[key] = v179
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb29(out *jwriter.Writer, in Data) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Segment) != 0 {
		const prefix string = ",\"segment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v180, v181 := range in.Segment {
				if v180 > 0 {
					out.RawByte(',')
				}
				(v181).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v182First := true
			for v182Name, v182Value := range in.Ext {
				if v182First {
					v182First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v182Name))
				out.RawByte(':')
				if m, ok := v182Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v182Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v182Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Data) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Data) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Data) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Data) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb29(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb30(in *jlexer.Lexer, out *CachedRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Id).UnmarshalJSON(data))
				}
			}
		case "imp":
			if in.IsNull() {
				in.Skip()
				out.Imp = nil
			} else {
				if out.Imp == nil {
					out.Imp = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Imp).UnmarshalJSON(data))
				}
			}
		case "site":
			if in.IsNull() {
				in.Skip()
				out.Site = nil
			} else {
				if out.Site == nil {
					out.Site = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Site).UnmarshalJSON(data))
				}
			}
		case "app":
			if in.IsNull() {
				in.Skip()
				out.App = nil
			} else {
				if out.App == nil {
					out.App = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.App).UnmarshalJSON(data))
				}
			}
		case "device":
			if in.IsNull() {
				in.Skip()
				out.Device = nil
			} else {
				if out.Device == nil {
					out.Device = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Device).UnmarshalJSON(data))
				}
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.User).UnmarshalJSON(data))
				}
			}
		case "at":
			if in.IsNull() {
				in.Skip()
				out.At = nil
			} else {
				if out.At == nil {
					out.At = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.At).UnmarshalJSON(data))
				}
			}
		case "tmax":
			if in.IsNull() {
				in.Skip()
				out.Tmax = nil
			} else {
				if out.Tmax == nil {
					out.Tmax = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Tmax).UnmarshalJSON(data))
				}
			}
		case "wseat":
			if in.IsNull() {
				in.Skip()
				out.Wseat = nil
			} else {
				if out.Wseat == nil {
					out.Wseat = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Wseat).UnmarshalJSON(data))
				}
			}
		case "allimps":
			if in.IsNull() {
				in.Skip()
				out.Allimps = nil
			} else {
				if out.Allimps == nil {
					out.Allimps = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Allimps).UnmarshalJSON(data))
				}
			}
		case "cur":
			if in.IsNull() {
				in.Skip()
				out.Cur = nil
			} else {
				if out.Cur == nil {
					out.Cur = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Cur).UnmarshalJSON(data))
				}
			}
		case "bcat":
			if in.IsNull() {
				in.Skip()
				out.Bcat = nil
			} else {
				if out.Bcat == nil {
					out.Bcat = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Bcat).UnmarshalJSON(data))
				}
			}
		case "badv":
			if in.IsNull() {
				in.Skip()
				out.Badv = nil
			} else {
				if out.Badv == nil {
					out.Badv = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Badv).UnmarshalJSON(data))
				}
			}
		case "regs":
			if in.IsNull() {
				in.Skip()
				out.Regs = nil
			} else {
				if out.Regs == nil {
					out.Regs = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Regs).UnmarshalJSON(data))
				}
			}
		case "ext":
			if in.IsNull() {
				in.Skip()
				out.Ext = nil
			} else {
				if out.Ext == nil {
					out.Ext = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Ext).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb30(out *jwriter.Writer, in CachedRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Id == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Id).MarshalJSON())
		}
	}
	if in.Imp != nil {
		const prefix string = ",\"imp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Imp).MarshalJSON())
	}
	if in.Site != nil {
		const prefix string = ",\"site\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Site).MarshalJSON())
	}
	if in.App != nil {
		const prefix string = ",\"app\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.App).MarshalJSON())
	}
	if in.Device != nil {
		const prefix string = ",\"device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Device).MarshalJSON())
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.User).MarshalJSON())
	}
	{
		const prefix string = ",\"at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.At == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.At).MarshalJSON())
		}
	}
	if in.Tmax != nil {
		const prefix string = ",\"tmax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Tmax).MarshalJSON())
	}
	if in.Wseat != nil {
		const prefix string = ",\"wseat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Wseat).MarshalJSON())
	}
	if in.Allimps != nil {
		const prefix string = ",\"allimps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Allimps).MarshalJSON())
	}
	if in.Cur != nil {
		const prefix string = ",\"cur\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Cur).MarshalJSON())
	}
	if in.Bcat != nil {
		const prefix string = ",\"bcat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Bcat).MarshalJSON())
	}
	if in.Badv != nil {
		const prefix string = ",\"badv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Badv).MarshalJSON())
	}
	if in.Regs != nil {
		const prefix string = ",\"regs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Regs).MarshalJSON())
	}
	if in.Ext != nil {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CachedRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CachedRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CachedRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CachedRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb30(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb31(in *jlexer.Lexer, out *Bid) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "impid":
			out.Impid = string(in.String())
		case "price":
			out.Price = float32(in.Float32())
		case "adid":
			out.Adid = string(in.String())
		case "nurl":
			out.Nurl = string(in.String())
		case "adm":
			out.Adm = string(in.String())
		case "adomain":
			if in.IsNull() {
				in.Skip()
				out.Adomain = nil
			} else {
				in.Delim('[')
				if out.Adomain == nil {
					if !in.IsDelim(']') {
						out.Adomain = make([]string, 0, 4)
					} else {
						out.Adomain = []string{}
					}
				} else {
					out.Adomain = (out.Adomain)[:0]
				}
				for !in.IsDelim(']') {
					var v183 string
					v183 = string(in.String())
					out.Adomain = append(out.Adomain, v183)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bundle":
			out.Bundle = string(in.String())
		case "iurl":
			out.Iurl = string(in.String())
		case "cid":
			out.Cid = string(in.String())
		case "crid":
			out.Crid = string(in.String())
		case "attr":
			if in.IsNull() {
				in.Skip()
				out.Attr = nil
			} else {
				in.Delim('[')
				if out.Attr == nil {
					if !in.IsDelim(']') {
						out.Attr = make([]int, 0, 8)
					} else {
						out.Attr = []int{}
					}
				} else {
					out.Attr = (out.Attr)[:0]
				}
				for !in.IsDelim(']') {
					var v184 int
					v184 = int(in.Int())
					out.Attr = append(out.Attr, v184)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "deal_id":
			out.DealId = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v185 string
					v185 = string(in.String())
					out.Cat = append(out.Cat, v185)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v186 interface{}
					if m, ok := v186.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v186.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v186 = in.Interface()
					}
					(out.Ext)[key] = v186
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb31(out *jwriter.Writer, in Bid) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"impid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Impid))
	}
	{
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Price))
	}
	if in.Adid != "" {
		const prefix string = ",\"adid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Adid))
	}
	if in.Nurl != "" {
		const prefix string = ",\"nurl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Nurl))
	}
	if in.Adm != "" {
		const prefix string = ",\"adm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Adm))
	}
	if len(in.Adomain) != 0 {
		const prefix string = ",\"adomain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v187, v188 := range in.Adomain {
				if v187 > 0 {
					out.RawByte(',')
				}
				out.String(string(v188))
			}
			out.RawByte(']')
		}
	}
	if in.Bundle != "" {
		const prefix string = ",\"bundle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bundle))
	}
	if in.Iurl != "" {
		const prefix string = ",\"iurl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Iurl))
	}
	if in.Cid != "" {
		const prefix string = ",\"cid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cid))
	}
	if in.Crid != "" {
		const prefix string = ",\"crid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Crid))
	}
	if len(in.Attr) != 0 {
		const prefix string = ",\"attr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v189, v190 := range in.Attr {
				if v189 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v190))
			}
			out.RawByte(']')
		}
	}
	if in.DealId != "" {
		const prefix string = ",\"deal_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DealId))
	}
	if len(in.Cat) != 0 {
		const prefix string = ",\"cat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v191, v192 := range in.Cat {
				if v191 > 0 {
					out.RawByte(',')
				}
				out.String(string(v192))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v193First := true
			for v193Name, v193Value := range in.Ext {
				if v193First {
					v193First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v193Name))
				out.RawByte(':')
				if m, ok := v193Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v193Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v193Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Bid) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Bid) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Bid) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Bid) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb31(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb32(in *jlexer.Lexer, out *Banner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "w":
			out.W = int(in.Int())
		case "h":
			out.H = int(in.Int())
		case "wmax":
			out.Wmax = int(in.Int())
		case "hmax":
			out.Hmax = int(in.Int())
		case "wmin":
			out.Wmin = int(in.Int())
		case "hmin":
			out.Hmin = int(in.Int())
		case "id":
			out.Id = string(in.String())
		case "pos":
			out.Pos = int(in.Int())
		case "btype":
			if in.IsNull() {
				in.Skip()
				out.Btype = nil
			} else {
				in.Delim('[')
				if out.Btype == nil {
					if !in.IsDelim(']') {
						out.Btype = make([]int, 0, 8)
					} else {
						out.Btype = []int{}
					}
				} else {
					out.Btype = (out.Btype)[:0]
				}
				for !in.IsDelim(']') {
					var v194 int
					v194 = int(in.Int())
					out.Btype = append(out.Btype, v194)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.Battr = nil
			} else {
				in.Delim('[')
				if out.Battr == nil {
					if !in.IsDelim(']') {
						out.Battr = make([]int, 0, 8)
					} else {
						out.Battr = []int{}
					}
				} else {
					out.Battr = (out.Battr)[:0]
				}
				for !in.IsDelim(']') {
					var v195 int
					v195 = int(in.Int())
					out.Battr = append(out.Battr, v195)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.Mimes = nil
			} else {
				in.Delim('[')
				if out.Mimes == nil {
					if !in.IsDelim(']') {
						out.Mimes = make([]string, 0, 4)
					} else {
						out.Mimes = []string{}
					}
				} else {
					out.Mimes = (out.Mimes)[:0]
				}
				for !in.IsDelim(']') {
					var v196 string
					v196 = string(in.String())
					out.Mimes = append(out.Mimes, v196)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "topframe":
			out.Topframe = int(in.Int())
		case "expdir":
			if in.IsNull() {
				in.Skip()
				out.Expdir = nil
			} else {
				in.Delim('[')
				if out.Expdir == nil {
					if !in.IsDelim(']') {
						out.Expdir = make([]int, 0, 8)
					} else {
						out.Expdir = []int{}
					}
				} else {
					out.Expdir = (out.Expdir)[:0]
				}
				for !in.IsDelim(']') {
					var v197 int
					v197 = int(in.Int())
					out.Expdir = append(out.Expdir, v197)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.Api = nil
			} else {
				in.Delim('[')
				if out.Api == nil {
					if !in.IsDelim(']') {
						out.Api = make([]int, 0, 8)
					} else {
						out.Api = []int{}
					}
				} else {
					out.Api = (out.Api)[:0]
				}
				for !in.IsDelim(']') {
					var v198 int
					v198 = int(in.Int())
					out.Api = append(out.Api, v198)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v199 interface{}
					if m, ok := v199.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v199.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v199 = in.Interface()
					}
					(out.Ext)[key] = v199
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb32(out *jwriter.Writer, in Banner) {
	out.RawByte('{')
	first := true
	_ = first
	if in.W != 0 {
		const prefix string = ",\"w\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.W))
	}
	if in.H != 0 {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.H))
	}
	if in.Wmax != 0 {
		const prefix string = ",\"wmax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Wmax))
	}
	if in.Hmax != 0 {
		const prefix string = ",\"hmax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Hmax))
	}
	if in.Wmin != 0 {
		const prefix string = ",\"wmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Wmin))
	}
	if in.Hmin != 0 {
		const prefix string = ",\"hmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Hmin))
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Pos != 0 {
		const prefix string = ",\"pos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Pos))
	}
	if len(in.Btype) != 0 {
		const prefix string = ",\"btype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v200, v201 := range in.Btype {
				if v200 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v201))
			}
			out.RawByte(']')
		}
	}
	if len(in.Battr) != 0 {
		const prefix string = ",\"battr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v202, v203 := range in.Battr {
				if v202 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v203))
			}
			out.RawByte(']')
		}
	}
	if len(in.Mimes) != 0 {
		const prefix string = ",\"mimes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v204, v205 := range in.Mimes {
				if v204 > 0 {
					out.RawByte(',')
				}
				out.String(string(v205))
			}
			out.RawByte(']')
		}
	}
	if in.Topframe != 0 {
		const prefix string = ",\"topframe\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Topframe))
	}
	if len(in.Expdir) != 0 {
		const prefix string = ",\"expdir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v206, v207 := range in.Expdir {
				if v206 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v207))
			}
			out.RawByte(']')
		}
	}
	if len(in.Api) != 0 {
		const prefix string = ",\"api\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v208, v209 := range in.Api {
				if v208 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v209))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v210First := true
			for v210Name, v210Value := range in.Ext {
				if v210First {
					v210First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v210Name))
				out.RawByte(':')
				if m, ok := v210Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v210Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v210Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Banner) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Banner) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Banner) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Banner) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb32(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb33(in *jlexer.Lexer, out *Asset) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "required":
			out.Required = int(in.Int())
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(Title)
				}
				(*out.Title).UnmarshalEasyJSON(in)
			}
		case "img":
			if in.IsNull() {
				in.Skip()
				out.Img = nil
			} else {
				if out.Img == nil {
					out.Img = new(Image)
				}
				(*out.Img).UnmarshalEasyJSON(in)
			}
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				if out.Video == nil {
					out.Video = new(NativeVideo)
				}
				(*out.Video).UnmarshalEasyJSON(in)
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(NativeData)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v211 interface{}
					if m, ok := v211.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v211.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v211 = in.Interface()
					}
					(out.Ext)[key] = v211
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb33(out *jwriter.Writer, in Asset) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	if in.Required != 0 {
		const prefix string = ",\"required\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Required))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Title).MarshalEasyJSON(out)
	}
	if in.Img != nil {
		const prefix string = ",\"img\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Img).MarshalEasyJSON(out)
	}
	if in.Video != nil {
		const prefix string = ",\"video\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Video).MarshalEasyJSON(out)
	}
	if in.Data != nil {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Data).MarshalEasyJSON(out)
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v212First := true
			for v212Name, v212Value := range in.Ext {
				if v212First {
					v212First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v212Name))
				out.RawByte(':')
				if m, ok := v212Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v212Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v212Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Asset) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Asset) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Asset) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Asset) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb33(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb34(in *jlexer.Lexer, out *App) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v213 string
					v213 = string(in.String())
					out.Cat = append(out.Cat, v213)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sectioncat":
			if in.IsNull() {
				in.Skip()
				out.Sectioncat = nil
			} else {
				in.Delim('[')
				if out.Sectioncat == nil {
					if !in.IsDelim(']') {
						out.Sectioncat = make([]string, 0, 4)
					} else {
						out.Sectioncat = []string{}
					}
				} else {
					out.Sectioncat = (out.Sectioncat)[:0]
				}
				for !in.IsDelim(']') {
					var v214 string
					v214 = string(in.String())
					out.Sectioncat = append(out.Sectioncat, v214)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pagecat":
			if in.IsNull() {
				in.Skip()
				out.Pagecat = nil
			} else {
				in.Delim('[')
				if out.Pagecat == nil {
					if !in.IsDelim(']') {
						out.Pagecat = make([]string, 0, 4)
					} else {
						out.Pagecat = []string{}
					}
				} else {
					out.Pagecat = (out.Pagecat)[:0]
				}
				for !in.IsDelim(']') {
					var v215 string
					v215 = string(in.String())
					out.Pagecat = append(out.Pagecat, v215)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ver":
			out.Ver = string(in.String())
		case "bundle":
			out.Bundle = string(in.String())
		case "privacypolicy":
			out.Privacypolicy = int(in.Int())
		case "paid":
			out.Paid = int(in.Int())
		case "publisher":
			if in.IsNull() {
				in.Skip()
				out.Publisher = nil
			} else {
				if out.Publisher == nil {
					out.Publisher = new(Publisher)
				}
				easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb5(in, &*out.Publisher)
			}
		case "keywords":
			out.Keywords = string(in.String())
		case "storeurl":
			out.Storeurl = string(in.String())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v216 interface{}
					if m, ok := v216.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v216.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v216 = in.Interface()
					}
					(out.Ext)[key] = v216
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb34(out *jwriter.Writer, in App) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Domain != "" {
		const prefix string = ",\"domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	if len(in.Cat) != 0 {
		const prefix string = ",\"cat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v217, v218 := range in.Cat {
				if v217 > 0 {
					out.RawByte(',')
				}
				out.String(string(v218))
			}
			out.RawByte(']')
		}
	}
	if len(in.Sectioncat) != 0 {
		const prefix string = ",\"sectioncat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v219, v220 := range in.Sectioncat {
				if v219 > 0 {
					out.RawByte(',')
				}
				out.String(string(v220))
			}
			out.RawByte(']')
		}
	}
	if len(in.Pagecat) != 0 {
		const prefix string = ",\"pagecat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v221, v222 := range in.Pagecat {
				if v221 > 0 {
					out.RawByte(',')
				}
				out.String(string(v222))
			}
			out.RawByte(']')
		}
	}
	if in.Ver != "" {
		const prefix string = ",\"ver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ver))
	}
	if in.Bundle != "" {
		const prefix string = ",\"bundle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bundle))
	}
	if in.Privacypolicy != 0 {
		const prefix string = ",\"privacypolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Privacypolicy))
	}
	if in.Paid != 0 {
		const prefix string = ",\"paid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Paid))
	}
	if in.Publisher != nil {
		const prefix string = ",\"publisher\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb5(out, *in.Publisher)
	}
	if in.Keywords != "" {
		const prefix string = ",\"keywords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Keywords))
	}
	if in.Storeurl != "" {
		const prefix string = ",\"storeurl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Storeurl))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v223First := true
			for v223Name, v223Value := range in.Ext {
				if v223First {
					v223First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v223Name))
				out.RawByte(':')
				if m, ok := v223Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v223Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v223Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v App) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v App) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *App) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *App) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb34(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb35(in *jlexer.Lexer, out *AltNativeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ver":
			out.Ver = int(in.Int())
		case "assets":
			if in.IsNull() {
				in.Skip()
				out.Assets = nil
			} else {
				in.Delim('[')
				if out.Assets == nil {
					if !in.IsDelim(']') {
						out.Assets = make([]ResponseAsset, 0, 1)
					} else {
						out.Assets = []ResponseAsset{}
					}
				} else {
					out.Assets = (out.Assets)[:0]
				}
				for !in.IsDelim(']') {
					var v224 ResponseAsset
					(v224).UnmarshalEasyJSON(in)
					out.Assets = append(out.Assets, v224)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "link":
			if in.IsNull() {
				in.Skip()
				out.Link = nil
			} else {
				if out.Link == nil {
					out.Link = new(Link)
				}
				(*out.Link).UnmarshalEasyJSON(in)
			}
		case "imptrackers":
			if in.IsNull() {
				in.Skip()
				out.Imptrackers = nil
			} else {
				in.Delim('[')
				if out.Imptrackers == nil {
					if !in.IsDelim(']') {
						out.Imptrackers = make([]string, 0, 4)
					} else {
						out.Imptrackers = []string{}
					}
				} else {
					out.Imptrackers = (out.Imptrackers)[:0]
				}
				for !in.IsDelim(']') {
					var v225 string
					v225 = string(in.String())
					out.Imptrackers = append(out.Imptrackers, v225)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "jstracker":
			out.Jstracker = string(in.String())
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Ext = make(Extensions)
				} else {
					out.Ext = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v226 interface{}
					if m, ok := v226.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v226.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v226 = in.Interface()
					}
					(out.Ext)[key] = v226
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb35(out *jwriter.Writer, in AltNativeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ver != 0 {
		const prefix string = ",\"ver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Ver))
	}
	{
		const prefix string = ",\"assets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Assets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v227, v228 := range in.Assets {
				if v227 > 0 {
					out.RawByte(',')
				}
				(v228).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Link == nil {
			out.RawString("null")
		} else {
			(*in.Link).MarshalEasyJSON(out)
		}
	}
	if len(in.Imptrackers) != 0 {
		const prefix string = ",\"imptrackers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v229, v230 := range in.Imptrackers {
				if v229 > 0 {
					out.RawByte(',')
				}
				out.String(string(v230))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"jstracker\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Jstracker))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v231First := true
			for v231Name, v231Value := range in.Ext {
				if v231First {
					v231First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v231Name))
				out.RawByte(':')
				if m, ok := v231Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v231Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v231Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AltNativeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AltNativeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AltNativeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AltNativeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb35(l, v)
}
func easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb36(in *jlexer.Lexer, out *AltNativeAdm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "native":
			if in.IsNull() {
				in.Skip()
				out.Native = nil
			} else {
				if out.Native == nil {
					out.Native = new(AltNativeResponse)
				}
				(*out.Native).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb36(out *jwriter.Writer, in AltNativeAdm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Native != nil {
		const prefix string = ",\"native\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Native).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AltNativeAdm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AltNativeAdm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC76e1e44EncodeGithubComPubnativeOpenrtb36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AltNativeAdm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AltNativeAdm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC76e1e44DecodeGithubComPubnativeOpenrtb36(l, v)
}
